import re
import warnings
import urllib.parse

from .web import WebObject
from .yak import Yak
from .yakker import Yakker


class YikYak(WebObject):
    def __init__(self):
        super().__init__()
        self.yakker = None

    def get_csrf_token(self):
        """Retrieve the CSRF token from a regular HTML view"""
        response = self.session.get('https://www.yikyak.com/nearby')
        pattern = re.compile('"csrfToken":"([\w\d-]+)"')
        return re.search(pattern, response.text).group(1)

    def login(self, country_code, phone_number, pin):
        """Deprecated: Please use .login_pin() instead"""
        message = "YikYak.login() is deprecated. Please use YikYak.login_pin()"
        warnings.warn(message, DeprecationWarning)
        self.login_pin(country_code, phone_number, pin)

    def login_pin(self, country_code, phone_number, pin):
        """
        Login to YikYak using the app's 'Authenticate for Web' PIN code

        Arguments:
            country_code (string): country code
            phone_number (string): phone number
            pin          (string): six-digit PIN code from app
        """

        # Strip all whitespace from PIN
        pin = "".join(str(pin).split())

        # Raise warning if PIN looks incorrect
        regex = re.compile(r'^\d{6}$')
        if not regex.match(pin):
            message = "PIN may be invalid. Expected six digit code but got {}"
            message = message.format(pin)
            warnings.warn(message)

        access_token = self.pair(country_code, phone_number, pin)
        csrf_token = self.get_csrf_token()
        self.session.headers.update({
            'x-access-token': access_token,
            'X-Csrf-Token': csrf_token,
        })

        # Initialise Yakker
        self.yakker = Yakker(self.session, {})
        self.yakker.refresh()

    def login_id(self, country_code, phone_number, user_id):
        """
        Login to YikYak with your User ID

        This is not the same as your YikYak username / handle. It can be
        retrieved by first logging in with your PIN code

        >> COUNTRY_CODE = "XXX"
        >> PHONE_NUMBER = "0123456789"
        >>
        >> client = YikYak()
        >> pin = input("Web authentication PIN: ")
        >> client.login_pin(COUNTRY_CODE, PHONE_NUMBER, pin)
        >> print(client.yakker.userID)        

        Arguments:
            country_code (string): country code
            phone_number (string): phone number
            user_id      (string): YikYak user ID
        """

        # Strip all whitespace from user_id
        user_id = "".join(str(user_id).split())

        # Raise warning if User ID looks like PIN
        regex = re.compile(r'^\d{6}$')
        if regex.match(user_id):
            message = (
                "Provided user ID ({}) looks like a PIN code. Did you mean to "
                "use login_pin()?"
            )
            message = message.format(user_id)
            warnings.warn(message)

        pin = self.init_pairing(user_id)
        self.login_pin(country_code, phone_number, pin)

    def init_pairing(self, user_id):
        """
        Initialise web pairing and retrieve authentication PIN

        Arguments:
            user_id (string): YikYak user ID

        Returns:
            6 digit PIN code for use with pairing
        """
        url = "https://www.yikyak.com/api/auth/initPairing"
        data = {'userID': user_id}
        response = self._request('POST', url, data=data)
        return response['pin']

    def pair(self, country_code, phone_number, pin):
        """
        Login to YikYak to retrieve authentication token

        Arguments:
            country_code (string): 3-letter string representing country
            phone_number (string): phone number
            pin (string): authentication PIN generated by mobile app

        Returns:
            Authentication token required for further YikYak access
        """
        url = "https://www.yikyak.com/api/auth/pair"

        json = {
            'countryCode': country_code,
            'phoneNumber': phone_number,
            'pin': pin,
        }

        response = self._request('POST', url, json=json)
        self.yakker = None
        return response

    def _get_yaks(self, url, latitude=0, longitude=0, feed_type='new'):
        """
        Retrieve Yaks from a URL

        Latitude and longitude will only affect Yak retrieval when searching
        based on location

        Arguments:
            url (string): Yak feed
            *latitude (number): latitude co-ordinate
            *longitude (number): longitude co-ordinate

        Returns:
            List of Yak objects from the feed
        """
        params = {
            'feedType': feed_type,
            'lat': latitude,
            'long': longitude,
            'userLat': latitude,
            'userLong': longitude,
        }

        response = self._request('GET', url, params=params)

        # Generate new Yak objects from the JSON
        yaks = [Yak(self.session, data) for data in response]
        return yaks

    def get_new_yaks(self, latitude, longitude):
        """
        Retrieve new Yaks from a location

        Arguments:
            latitude (float): location latitude
            longitude (float): location longitude

        Returns:
            List of Yak objects
        """
        url = self.base_url + 'messages'
        return self._get_yaks(url, latitude, longitude, 'new')

    def get_hot_yaks(self, latitude, longitude):
        """
        Retrieve hot Yaks from a location

        Arguments:
            latitude (float): location latitude
            longitude (float): location longitude

        Returns:
            List of Yak objects
        """
        url = self.base_url + 'messages'
        return self._get_yaks(url, latitude, longitude, 'hot')

    def get_my_yaks(self):
        """
        Retrieve new Yaks from user's post history

        Returns:
            List of Yak objects
        """
        url = self.base_url + 'messages/myYaks'
        return self._get_yaks(url)

    def get_my_new_yaks(self):
        warnings.warn("Use get_my_yaks() instead", DeprecationWarning)
        return self.get_my_yaks()

    def get_my_hot_yaks(self):
        raise NotImplementedError("Removed in API V2")

    def get_my_replies(self):
        """
        Retrieve new Yaks from user's comment history

        Returns:
            List of Yak objects
        """
        url = self.base_url + 'messages/myReplies'
        return self._get_yaks(url)

    def get_my_new_replies(self):
        warnings.warn("Use get_my_replies() instead", DeprecationWarning)
        return self.get_my_replies()

    def get_my_hot_replies(self):
        raise NotImplementedError("Removed in API V2")

    def get_yak(self, yak_id):
        """
        Retrieve a Yak by ID

        Arguments:
            yak_id (string): ID of Yak to retrieve

        Returns:
            Yak object
        """
        urlsafe_id = urllib.parse.quote_plus(yak_id)
        url = self.base_url + "messages/{}"
        url = url.format(urlsafe_id)
        params = {
            'userLat': 0,
            'userLong': 0,
        }

        data = self._request('GET', url, params=params)
        return Yak(self.session, data)

    def _get_aws_url(self):
        """Request an ID / URL for uploading images"""
        url = "https://www.yikyak.com/api/v2/photo/getUrl"
        return self._request('GET', url)

    def _upload_image(self, image):
        """
        Compose a new Yak at a co-ordinate

        Arguments:
            image   file    file to upload

        Returns:
            ID of uploaded image for use in Yak submission
        """
        response = self._get_aws_url()
        self._request('PUT', response['url'], data=image.read())
        return response['imageId']

    def compose_yak(self, message, latitude, longitude, handle, image=None):
        """
        Compose a new Yak at a co-ordinate

        Arguments:
            message     string    Yak body text
            latitude    float     coordinate latitude
            longitude   float     coordinate longitude
            handle      boolean   should we post using the handle?
            image       file      optional image file

        Returns:
            Yak object for the newly created post
        """
        url = self.base_url + 'messages'
        params = {
            'lat': latitude,
            'long': longitude,
            'myHerd': 0,
            'userLat': latitude,
            'userLong': longitude,
        }
        json = {
            'handle': handle,
            'message': message,
        }

        if image:
            image_id = self._upload_image(image)
            json['imageId'] = image_id

        resp = self._request('POST', url, params=params, json=json)
        return Yak(self.session, resp)

    def check_handle_availability(self, handle):
        """
        Check availability of a handle

        Arguments:
            handle (string): handle to check

        Returns:
            Boolean representing availability
        """
        url = self.base_url + 'yakker/handles'
        params = {
            'handle': handle,
        }
        data = self._request('GET', url, params=params)
        return data['code'] == 0

    def claim_handle(self, handle):
        """
        Claim a handle

        Arguments:
            handle (string): handle to claim
        """
        url = self.base_url + 'yakker/handles'
        json = {
            'handle': handle,
        }
        data = self._request('POST', url, json=json)
